

<div id ="modalid" class="modal tobedisplayedindialog">
    <div class="modal-content container">
        
        <div class="setnickname">
            <img src="../../Content/images/vicsparty.png" />   
            <div class="row">

                <p>Enter Nickname</p>
            </div>
            <div class="row">
                <input id="nickname" type="text"/>
            </div>
            <div class="row">
                <button onclick="submitnickname()" class="btn btn-primary">ENTER</button>
            </div>




        </div>
            


        <div class="chooseroomdiv" style="display: none">
            <div class ="row">
                <button onclick="publicroomchosen()" class="btn btn-primary">private room</button>
            </div>
            <div class="row">
                <button class="disabledbutton btn btn-primary">public room</button>
            </div>
            <div class="row">
                <button class="disabledbutton btn btn-primary">lobby</button>
            </div>
        </div>
            
            
        <div class="choosecreateorjoindiv" style="display: none">
            <div class ="row">
                <button onclick="choosegame()" class="btn btn-primary">Create</button>
            </div>
            <div class="row">
                <h1>OR</h1><br/>
                <h3>Room Number:</h3>
                <input id="joinroomnumber" type="text"/>
                <button onclick="joinroom()" class="btn btn-primary">join</button>
            </div>
        
        </div>
            
        <div class="choosegamediv" style="display: none">
            <div class="row">
                
                <div class="col-md-3 typingracedivbutton">
                    <img class="img-responsive"src="../../Content/images/typing.png"/>
                    <h1>Typeracer</h1>
                </div>
                
            </div>
                
                
        
        </div>
            

    </div>

</div>





<div class="prebattlediv container" style="display: none">
    <h1 id="room"></h1>
    <div class="row">
        <div id="teamA" class="col-md-4 team">
            <h1>Team A</h1>
            <button class="teamA btn-success" onclick="jointeam('A')">Join Team!</button>
            <!--TEAM A-->
        </div>
        <div id="vsdiv" class="col-md-4">
            <h1>VS</h1>
            <button onclick="startthegame()" id="startgame" class="btn-danger">START GAME!!</button>
        </div>
        <div id="teamB" class="col-md-4 team">
            <h1>Team B</h1>
            <button  class="btn-success" onclick="jointeam('B')">Join Team!</button>
            <!--TEAM B-->

        </div>
    </div>
    <div class="row">
        <div class="col-md-10">
            <textarea id="chat" class="form-control" readonly></textarea>
        </div>
        <div class="col-md-2 playerlist">
            <!--PLAYERS WILL ENTER HERE-->

        </div>
    </div>
    <div class="row">
        <input id="chatinput" type="text"/>
    </div>
</div>

<div class="container gamediv" style="display: none">
    <button onclick="teamcreationroom()">Back to team creation room</button>
    <div class="row">
        <div class="teamAdiv col-md-5 gameteamdiv">
            <div class="row">
                <h1 id="timeeamA">time</h1>
            </div>
            <div class="row">
                <textarea id="teamAgametextarea" readonly="">Being a first-time author and going on Oprah but being told you can't mention your book is pretty much akin to having Charlize Theron walk up real close to you, take off all her clothes, look you in the eye -- lean so close you can feel her warm breath -- and whisper in your ear: You may not touch me.</textarea>
            </div>
            <div class="row">
                <textarea  id="teamAgametextareatype" onkeyup="typecharattextarea()"></textarea>
            </div>
        </div>
        <div class="teamBdiv col-md-5 gameteamdiv">
            <div class="row">
                <h1 id="timeeamB">time</h1>
            </div>
            <div class="row">
                <textarea id="teamBgametextarea" readonly="">Being a first-time author and going on Oprah but being told you can't mention your book is pretty much akin to having Charlize Theron walk up real close to you, take off all her clothes, look you in the eye -- lean so close you can feel her warm breath -- and whisper in your ear: You may not touch me.</textarea>
            </div>
            <div class="row">
                <textarea   id="teamBgametextareatype" onkeyup="typecharattextarea()"></textarea>
            </div>
        </div>
        <div class="col-md-2 playerlist">

        </div>

    </div>

</div>


<script>
    
</script>

@section scripts{

    <script>
        var room = "";
        var nickname;
        var listofplayers = [];
        var ws;
        var teamA = [];
        var teamB = [];
        var teamstatesupdated = false;
        var timeclockA;
        var timeclockB;
        var domain = "vicsparty.com";
        //         localhost:55656
        /*


        var websocketrequest = {
            typeofalert: "jointeamrequest",
            data: {
                team: param_team,
                player: nickname
            }
        }

        ws.send(json.stringify(websocketrequest));


        */
        
        //$("#chatinput").css({
        //    "max-width": "1000px",
        //    width:"1000px"
        //});
        $(".typingracedivbutton").click(function () {
            
            createroom();
        }).css("cursor", "pointer");

        $("#chatinput").on('keyup',function(e) {
            if (e.keyCode == 13) {
                ws.send($("#chatinput").val());
                $("#chatinput").val("");
            }
            
        })
        $("#modalid").css({
            display: 'block'
        });

        $(".disabledbutton").css({
            "background-color": "#d9d9d9",
            color: "#737373"
        });
        

        function teamcreationroom() {
            $(".prebattlediv").css({ display: "block" });
            $(".gamediv").css({ display: "none" });
            stopclock(timeclockA);
            stopclock(timeclockB);
            $("#teamAgametextareatype").val("");
            $("#teamBgametextareatype").val("");
            $("#teamAgametextareatype").css({ "background-color": "white" });
            $("#teamBgametextareatype").css({ "background-color": "white" });
            $("#timeeamA").text("TIME");
            $("#timeeamB").text("TIME");
            
        }
        function startclocks() {
            var startingdate = Math.floor(Date.now() / 1000);
            var elapsedminutes = 0;
            var elapsedseconds = 0;
            timeclockA = setInterval(function() {
                    if (elapsedseconds > 58) {
                        startingdate = startingdate + 60;
                        elapsedminutes = elapsedminutes + 1;
                        elapsedseconds = 0;
                    }
                    elapsedseconds = Math.floor(Date.now() / 1000) - startingdate;

                    if (elapsedseconds < 10) {
                        
                            $("#timeeamA").text("TIME: " + elapsedminutes + ":0" + elapsedseconds);    
                        
                        
                            
                        
                        
                    } else {
                        
                            $("#timeeamA").text("TIME: " + elapsedminutes + ":" + elapsedseconds);    
                        
                        
                            
                        
                    }
                },
                1000);


            timeclockB = setInterval(function() {
                    if (elapsedseconds > 58) {
                        startingdate = startingdate + 60;
                        elapsedminutes = elapsedminutes + 1;
                        elapsedseconds = 0;
                    }
                    elapsedseconds = Math.floor(Date.now() / 1000) - startingdate;

                    if (elapsedseconds < 10) {
                        
                            
                        
                        
                        $("#timeeamB").text("TIME: " + elapsedminutes + ":0" + elapsedseconds);  
                        
                        
                    } else {
                        
                        
                        
                        
                        $("#timeeamB").text("TIME: " + elapsedminutes + ":" + elapsedseconds);  
                        
                    }
                },
                1000);
            
        }

        function stopclock(timeclock) {
            clearInterval(timeclock);
        }


        function startthegame() {

            var websocketrequest = {
                typeofalert: "startthegamerequest",
                data: {
                    teamA: teamA,
                    teamB: teamB
                }
            }

            ws.send(JSON.stringify(websocketrequest));


        }

        function begingame() {
            $(".gamediv").css({
                display: "block"
            });
            $(".prebattlediv").css({
                display: "none"
            });
            
            startclocks();    
            
            
            $("#teamAgametextarea,#teamAgametextareatype").bind("cut copy paste",
                function(e) {
                    e.preventDefault();
                });
            $("#teamBgametextarea,#teamBgametextareatype").bind("cut copy paste",
                function(e) {
                    e.preventDefault();
                });


        }

        function updateingametextareas(newjsonobject) {

            if (newjsonobject.data.player !== nickname) {


                if (teamA.indexOf(newjsonobject.data.player) >= 0) {
                    console.log(teamA.indexOf(nickname));
                    $("#teamAgametextareatype").val(newjsonobject.data.key);
                    console.log("A textarea being filled with " + newjsonobject.data.key);
                }
                if (teamB.indexOf(newjsonobject.data.player) >= 0) {
                    console.log(teamB.indexOf(nickname));
                    $("#teamBgametextareatype").val(newjsonobject.data.key);
                    console.log("B textarea being filled with " + newjsonobject.data.key);
                }
            }

        }

        function typecharattextarea() {
            var temptext = "";
            
            if ($("#teamAgametextareatype").val().length === $("#teamAgametextarea").val().length && teamA.indexOf(nickname) >= 0) {
                    if ($("#teamAgametextareatype").val() === $("#teamAgametextarea").val()) {
                        var websocketrequest2 = {
                            typeofalert: "victoryrequest",
                            data: {
                                player: nickname
                            }
                        }
                        ws.send(JSON.stringify(websocketrequest2));
                        console.log("A HAS COMPLETED THE GAME!!!!!");
                }
                return;
            }

            if ($("#teamBgametextareatype").val().length === $("#teamBgametextarea").val().length && teamB.indexOf(nickname) >= 0) {
                    if ($("#teamBgametextareatype").val() === $("#teamBgametextarea").val()) {
                        var websocketrequest3 = {
                            typeofalert: "victoryrequest",
                            data: {
                                player: nickname
                            }
                        }
                        ws.send(JSON.stringify(websocketrequest3));
                        console.log("B HAS COMPLETED THE GAME!!!!!");


                     }
                    return;
                }
            //$("#teamAgametextareatype,#teamBgametextareatype").css({
            //    "background-color": "white"
            //});
                
            if (teamA.indexOf(nickname) >= 0) {
                $("#teamAgametextareatype").css({ "background-color": "white" });
                    temptext = $("#teamAgametextareatype").val();
                    if ($("#teamAgametextareatype").val() !== ($("#teamAgametextarea").val()).substring(0, $("#teamAgametextareatype").val().length)) {
                        console.log(($("#teamAgametextarea").val()).substring(0, ($("#teamAgametextareatype").val().length)));
                        console.log($("#teamAgametextareatype").val() + " ");
                        $("#teamAgametextareatype").css({
                            "background-color": "red"
                        });
                    }
                }
            if (teamB.indexOf(nickname) >= 0) {
                temptext = $("#teamBgametextareatype").val();
                $("#teamBgametextareatype").css({ "background-color": "white" });
                if ($("#teamBgametextareatype").val() !== ($("#teamBgametextarea").val()).substring(0, $("#teamBgametextareatype").val().length)) {
                    console.log(($("#teamBgametextarea").val()).substring(0, ($("#teamBgametextareatype").val().length)));
                    console.log($("#teamBgametextareatype").val() + " ");
                    $("#teamBgametextareatype").css({
                        "background-color": "red"
                    });
                }
            }

                //if (teamB.indexOf(nickname) >= 0) {
                //    temptext = $("#teamBgametextareatype").val();
                //}
                var websocketrequest = {
                    typeofalert: "ingamerequest",
                    data: {
                        player: nickname,
                        key: temptext
                    }
                }

                ws.send(JSON.stringify(websocketrequest));
            
        }

        function playervictory(newjsonobject) {
            if (teamA.indexOf(newjsonobject.data.player) >= 0) {

                stopclock(timeclockA);
                $("#teamAgametextareatype").css({
                    "background-color": "green"
                });
            }
            if (teamB.indexOf(newjsonobject.data.player) >= 0) {
                stopclock(timeclockB);
                $("#teamBgametextareatype").css({
                    "background-color": "green"
                });
            }


        }



        function submitnickname() {
            nickname = $("#nickname").val();
            console.log("nickname set to " + nickname);

            $(".setnickname").css({ display: "none" });
            $(".chooseroomdiv").css({ display: "block" });
        };


        function publicroomchosen() {

            $(".chooseroomdiv").css({ display: "none" });
            $(".choosecreateorjoindiv").css({ display: "block" });
        }

        function choosegame() {
            $(".choosecreateorjoindiv").css({ display: "none" });
            $(".choosegamediv").css({ display: "block" });


        }

        function createroom() {
            $("#modalid").css({ display: "none" });
            $(".prebattlediv").css({ display: "block" });
            var url = "ws://"+domain+"/api/privateroom?name=" + nickname;
            ws = new WebSocket(url);
            teamstatesupdated = true;
            wireevents();
            listofplayers.push(nickname);
            includestate();
        }

        function joinroom() {
            $("#modalid").css({ display: "none" });
            var roomtojoin = $("#joinroomnumber").val();
            console.log(roomtojoin);
            var url = "ws://"+domain+"/api/privateroomjoin/" + roomtojoin + "?name=" + nickname;
            ws = new WebSocket(url);
            wireevents();

            var establishconnectioninterval = setInterval(function() {

                    if (ws.readyState === 1) {


                        var websocketrequest = {
                            typeofalert: "getstateofteams",
                            data: {
                            }
                        }

                        console.log(websocketrequest);
                        ws.send(JSON.stringify(websocketrequest));
                        clearInterval(establishconnectioninterval);
                        return;

                    } else {
                        console.log("wait for connection...");

                    }

                },
                15);
            listofplayers.push(nickname);
            includestate();


            //TODO
            //UPDATE  TEAMA ARRAY AND TEAM B ARRAY WITH INFO GIVEN IN DIVS AND TEAMA AND TEAM B VARS
        };

        function includestate() {
            
            $(".playerlist").append('<p nick="' + nickname + '" class="playerparagraph">' + nickname + '</p>');
            //TODO


            //update teamA array and team B array

        }

        function wireevents() {
            $(".prebattlediv").css({ display: "block" });
            ws.onerror = function(e) {
                console.log("error");
            };
            ws.onopen = function() {
                console.log("has connected");
            };

            ws.onmessage = function(e) {
                console.log(e.data);

                if (IsJsonString(e.data)) {


                    var newjsonobject = JSON.parse(e.data);
                    console.log(newjsonobject);
                    if (newjsonobject.typeofalert === "joinalert" || newjsonobject.typeofalert === "leavealert") {
                        if (room === "") {
                            updateroom(newjsonobject.room);
                        }
                        updatelistofplayers(newjsonobject);
                    } if (newjsonobject.typeofalert === "getstateofteams" ||
                        newjsonobject.typeofalert === "jointeamrequest") {
                        updateteam(newjsonobject);

                    } if (newjsonobject.typeofalert === "startthegamerequest") {
                        begingame();
                    } if (newjsonobject.typeofalert === "ingamerequest") {
                        updateingametextareas(newjsonobject);
                    } if (newjsonobject.typeofalert === "victoryrequest") {
                        playervictory(newjsonobject);
                    } 

                } else {
                    console.log("TRYING TO SEND CHAT MEESSAGE");
                    $("#chat").val($("#chat").val()+"\n"+e.data);
                }


            };

            ws.onclose = function() {
                console.log(nickname + " has gone away");
            };
        }

        function jointeam(param_team) {
            //$("#team" + param_team).append("<p>" + nickname + "</p>");


            var websocketrequest = {
                typeofalert: "jointeamrequest",
                data: {
                    team: param_team,
                    player: nickname
                }
            }

            ws.send(JSON.stringify(websocketrequest));


        }

        function updateteam(newjsonobject) {
            if (newjsonobject.typeofalert === "getstateofteams") {
                if (!teamstatesupdated) {
                    newjsonobject.teams.forEach(function(e) {
                        if (e.team.name === "A") {
                            e.team.players.forEach(function(player) {
                                teamA.push(player);
                                $("#team" + e.team.name)
                                    .append("<p id='" + player + "' class='" + e.team.name + "'>" + player + "</p>");
                            });
                        }
                        if (e.team.name === "B") {
                            e.team.players.forEach(function(player) {
                                teamB.push(player);
                                //$("#team" + e.team.name).append("<p>" + player + "</p>");
                                $("#team" + e.team.name)
                                    .append("<p id='" + player + "' class='" + e.team.name + "'>" + player + "</p>");
                            });
                        }
                    });
                    teamstatesupdated = true;
                }

            }
            if (newjsonobject.typeofalert === "jointeamrequest") {

                if (newjsonobject.data.team === "A") {
                    teamA.push(newjsonobject.data.player);
                    $("#team" + newjsonobject.data.team).append("<p id='" +
                        newjsonobject.data.player +
                        "' class='" +
                        newjsonobject.data.team +
                        "'>" +
                        newjsonobject.data.player +
                        "</p>");
                    try {
                        $("#" + newjsonobject.data.player + ".B").remove();
                        teamB.splice($.inarray(newjsonobject.jointeamrequest[1], teamB), 1);


                    } catch (e) {

                    }
                }
                if (newjsonobject.data.team === "B") {
                    teamB.push(newjsonobject.data.player);
                    $("#team" + newjsonobject.data.team).append("<p id='" +
                        newjsonobject.data.player +
                        "' class='" +
                        newjsonobject.data.team +
                        "'>" +
                        newjsonobject.data.player +
                        "</p>");
                    try {
                        $("#" + newjsonobject.data.player + ".A").remove();
                        teamA.splice($.inarray(newjsonobject.jointeamrequest[1], teamA), 1);


                    } catch (e) {

                    }
                }


            }


            //$("#team" + newjsonobject.jointeamrequest[0]).append("<p>" + newjsonobject.jointeamrequest[1] + "</p>");

        }

        function updateroom(myroomnumber) {
            console.log(myroomnumber);
            $("#room").text("Room: " + myroomnumber);
            room = myroomnumber;
        }

        function updatelistofplayers(newjsonobject) {
            //            var myjsonobj = JSON.parse(jsonstring);
            console.log(newjsonobject.typeofalert);
            if (newjsonobject.typeofalert === "joinalert") {

                for (var i = 0; i < newjsonobject.listofplayers.length; i++) {
                    var tempnewplayer = null;
                    for (var j = 0; j < listofplayers.length; j++) {
                        if (newjsonobject.listofplayers[i] === listofplayers[j]) {
                            tempnewplayer = null;
                            break;
                        } else {
                            tempnewplayer = newjsonobject.listofplayers[i];
                        }

                    }
                    if (tempnewplayer !== null) {
                        listofplayers.push(tempnewplayer);
                        $(".playerlist").append('<p nick="' +
                            tempnewplayer +
                            '" class="playerparagraph">' +
                            tempnewplayer +
                            '</p>');
                    }

                }
                console.log(listofplayers);
            }

            if (newjsonobject.typeofalert === "leavealert") {

                for (var i = 0; i < listofplayers.length; i++) {
                    var tempnewplayer = null;
                    for (var j = 0; j < newjsonobject.listofplayers.length; j++) {
                        if (newjsonobject.listofplayers[j] === listofplayers[i]) {
                            tempnewplayer = null;
                            break;
                        } else {
                            tempnewplayer = listofplayers[i];
                        }

                    }
                    if (tempnewplayer !== null) {

                        listofplayers.splice($.inArray(tempnewplayer, listofplayers), 1);

                        $("p[nick='" + tempnewplayer + "']").remove();

                    }

                }
                console.log(listofplayers);
            }


        }


        function IsJsonString(str) {
            try {
                JSON.parse(str);
            } catch (e) {
                return false;
            }
            if (str.charAt(0) === '{') {
                return true;
            }
            return false;
        }

    </script>

    }

